type: edu
files:
- name: src/recipes/RecipesApplication.java
  visible: true
  text: |
    package recipes;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class RecipesApplication {
        public static void main(String[] args) {
            SpringApplication.run(RecipesApplication.class, args);
        }
    }
  learner_created: false
- name: resources/application.properties
  visible: true
  text: |-
    server.port=8881
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/RecipesApplicationTest.java
  visible: false
  text: |
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;

    import recipes.RecipesApplication;

    import java.util.ArrayList;
    import java.util.List;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;


    public class RecipesApplicationTest extends SpringTest {

        public RecipesApplicationTest() {
            super(RecipesApplication.class);
        }

        // Initialization ---

        static class Recipe {
            final String name;
            final String description;
            final String[] ingredients;
            final String[] directions;

            Recipe(String name, String description, String[] ingredients, String[] directions) {
                this.name = name;
                this.description = description;
                this.ingredients = ingredients;
                this.directions = directions;
            }
        }

        final Recipe[] RECIPES = {
            new Recipe(
                "Fresh Mint Tea /Test",
                "Light, aromatic and refreshing beverage, ... /Test",
                new String[]{"boiled water", "honey", "fresh mint leaves /Test"},
                new String[]{"Boil water", "Pour boiling hot water into a mug", "Add fresh mint leaves", "Mix and let the mint leaves seep for 3-5 minutes", "Add honey and mix again /Test"}
            ),

            new Recipe(
                "Warming Ginger Tea /Test",
                "Ginger tea is a warming drink for cool weather, ... /Test",
                new String[]{"1 inch ginger root, minced", "1/2 lemon, juiced", "1/2 teaspoon manuka honey /Test"},
                new String[]{"Place all ingredients in a mug and fill with warm water (not too hot so you keep the beneficial honey compounds in tact)", "Steep for 5-10 minutes", "Drink and enjoy /Test"}
            )
        };

        final String[] JSON_RECIPES = {
            new Gson().toJson(RECIPES[0]),
            new Gson().toJson(RECIPES[1])
        };


        final String API_RECIPE_NEW = "/api/recipe/new";
        final String API_RECIPE = "/api/recipe/";

        // recipes ids will be saved when testing POST requests and used later to test GET requests
        final List<Integer> recipeIds = new ArrayList<>();


        // Helper functions ---

        static void throwIfIncorrectStatusCode(HttpResponse response, int status) {
            if (response.getStatusCode() != status) {
                throw new WrongAnswer(response.getRequest().getMethod() +
                    " " + response.getRequest().getLocalUri() +
                    " should respond with status code " + status +
                    ", responded: " + response.getStatusCode() + "\n\n" +
                    "Response body:\n" + response.getContent());
            }
        }


        // Tests ---

        @DynamicTest
        DynamicTesting[] dt = new DynamicTesting[]{
            this::testGetRecipeNotFoundStatusCode,

            () -> testPostRecipe(JSON_RECIPES[0]),
            () -> testPostRecipe(JSON_RECIPES[1]),

            () -> testGetRecipe(recipeIds.get(0), RECIPES[0]),
            () -> testGetRecipe(recipeIds.get(1), RECIPES[1])
        };

        CheckResult testPostRecipe(String jsonRecipe) {

            HttpResponse response = post(API_RECIPE_NEW, jsonRecipe).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(recipeId -> {
                        recipeIds.add(recipeId);
                        return true;
                    })));

            return correct();
        }

        CheckResult testGetRecipe(int recipeId, Recipe recipe) {

            HttpResponse response = get(API_RECIPE + recipeId).send();

            throwIfIncorrectStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("name", isString(recipe.name))
                    .value("description", isString(recipe.description))
                    .value("ingredients", isArray(recipe.ingredients))
                    .value("directions", isArray(recipe.directions)));

            return correct();
        }

        CheckResult testGetRecipeNotFoundStatusCode() {
            HttpResponse response = get(API_RECIPE + (Integer.MAX_VALUE - 5)).send();

            throwIfIncorrectStatusCode(response, 404);

            return correct();
        }
    }
  learner_created: false
- name: src/recipes/service/RecipeService.java
  visible: true
  text: |
    package recipes.service;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import recipes.data.Recipe;

    @Service
    public class RecipeService {
        private final Recipe recipe;

        @Autowired
        public RecipeService(Recipe recipe) {
            this.recipe = recipe;
        }

        public Recipe getRecipeInfo() {
            return recipe;
        }

        public Recipe updateRecipe(Recipe updateRecipe) {
            recipe.setName(updateRecipe.getName());
            recipe.setDescription(updateRecipe.getDescription());
            recipe.setIngredients(updateRecipe.getIngredients());
            recipe.setDirections(updateRecipe.getDirections());
            return recipe;
        }
    }
  learner_created: true
- name: src/recipes/api/RecipeApi.java
  visible: true
  text: |
    package recipes.api;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.*;
    import recipes.data.Recipe;
    import recipes.service.RecipeService;

    @RestController
    @RequestMapping("/api")
    public class RecipeApi {

        private final RecipeService recipeService;

        @Autowired
        public RecipeApi(RecipeService recipeService) {
            this.recipeService = recipeService;
        }

        @GetMapping("/recipe")
        public Recipe getRecipe() {
            return recipeService.getRecipeInfo();
        }

        @PostMapping("/recipe")
        public Recipe updateRecipe(@RequestBody Recipe updateRecipe) {
            return recipeService.updateRecipe(updateRecipe);
        }
    }
  learner_created: true
- name: src/recipes/data/Recipe.java
  visible: true
  text: |
    package recipes.data;

    import lombok.AllArgsConstructor;
    import lombok.Data;
    import lombok.NoArgsConstructor;
    import org.springframework.stereotype.Component;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @Component
    public class Recipe {
        private String name;
        private String description;
        private String ingredients;
        private String directions;
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/180/stages/918/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 13 Aug 2021 15:28:46 UTC
record: 2
